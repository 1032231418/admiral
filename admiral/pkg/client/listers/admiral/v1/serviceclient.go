/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/istio-ecosystem/admiral/admiral/pkg/apis/admiral/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceClientLister helps list ServiceClients.
type ServiceClientLister interface {
	// List lists all ServiceClients in the indexer.
	List(selector labels.Selector) (ret []*v1.ServiceClient, err error)
	// ServiceClients returns an object that can list and get ServiceClients.
	ServiceClients(namespace string) ServiceClientNamespaceLister
	ServiceClientListerExpansion
}

// serviceClientLister implements the ServiceClientLister interface.
type serviceClientLister struct {
	indexer cache.Indexer
}

// NewServiceClientLister returns a new ServiceClientLister.
func NewServiceClientLister(indexer cache.Indexer) ServiceClientLister {
	return &serviceClientLister{indexer: indexer}
}

// List lists all ServiceClients in the indexer.
func (s *serviceClientLister) List(selector labels.Selector) (ret []*v1.ServiceClient, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceClient))
	})
	return ret, err
}

// ServiceClients returns an object that can list and get ServiceClients.
func (s *serviceClientLister) ServiceClients(namespace string) ServiceClientNamespaceLister {
	return serviceClientNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceClientNamespaceLister helps list and get ServiceClients.
type ServiceClientNamespaceLister interface {
	// List lists all ServiceClients in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ServiceClient, err error)
	// Get retrieves the ServiceClient from the indexer for a given namespace and name.
	Get(name string) (*v1.ServiceClient, error)
	ServiceClientNamespaceListerExpansion
}

// serviceClientNamespaceLister implements the ServiceClientNamespaceLister
// interface.
type serviceClientNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceClients in the indexer for a given namespace.
func (s serviceClientNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceClient, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceClient))
	})
	return ret, err
}

// Get retrieves the ServiceClient from the indexer for a given namespace and name.
func (s serviceClientNamespaceLister) Get(name string) (*v1.ServiceClient, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("serviceclient"), name)
	}
	return obj.(*v1.ServiceClient), nil
}
